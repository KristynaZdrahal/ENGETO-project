1.Rostou v průběhu let mzdy ve všech odvětvích, nebo v některých klesají?
SELECT value ,
	industry_branch_code,
	payroll_year,
	payroll_quarter 
FROM czechia_payroll
;

---filtruju jen mzdy, kody odvětví,rok
SELECT value,
		industry_branch_code,
		payroll_year 
FROM czechia_payroll cp 
WHERE value IS NOT NULL
 ;
 

--zjistím začátek časového období--2000
SELECT 
    min(payroll_year) 
FROM 
    czechia_payroll cp ;
    
   
   
   --zjistím konec časového období--2021
     SELECT 
    max (payroll_year) 
FROM 
    czechia_payroll cp;
    
   --- vyfiltruji jedno odvětví 
    SELECT value,
		industry_branch_code,
		payroll_year 
FROM czechia_payroll cp 
WHERE value IS NOT NULL AND industry_branch_code = 'A'
ORDER BY payroll_year  ;
 


SELECT  value,
		industry_branch_code,
		payroll_year 
FROM czechia_payroll cp 
WHERE payroll_year = 2000 AND value IS NOT NULL
ORDER BY industry_branch_code 
 ;
 
SELECT  value,
		industry_branch_code,
		payroll_year 
FROM czechia_payroll cp 
WHERE payroll_year = 2021 AND value IS NOT NULL 
ORDER BY industry_branch_code
;

---průměrná hodnota v r.2000
SELECT  industry_branch_code,
round (avg (value),2) AS avg_value1 
FROM czechia_payroll cp 
WHERE payroll_year = 2000
GROUP BY industry_branch_code ;


---průměrná hodnota v r.2021
SELECT  industry_branch_code,
round (avg (value),2) AS avg_value2 
FROM czechia_payroll cp 
WHERE payroll_year = 2021
GROUP BY industry_branch_code ;


--porovnání průměrných platů za roky 2000 a 2021
SELECT 
    cp2000.industry_branch_code,
    cp2000.avg_value AS avg_value1,
    cp2021.avg_value AS avg_value2
FROM 
    (SELECT industry_branch_code, ROUND(AVG(value), 0) AS avg_value
     FROM czechia_payroll
     WHERE payroll_year = 2000
     GROUP BY industry_branch_code) cp2000
JOIN 
    (SELECT industry_branch_code, ROUND(AVG(value), 0) AS avg_value
     FROM czechia_payroll
     WHERE payroll_year = 2021
     GROUP BY industry_branch_code) cp2021
ON cp2000.industry_branch_code = cp2021.industry_branch_code;

–porovnání průměrných platů 2000 a 2021 (trend)
SELECT 
    cp2000.industry_branch_code,
    cp2000.avg_value AS avg_value_2000,
    cp2021.avg_value AS avg_value_2021,
    CASE 
        WHEN cp2021.avg_value > cp2000.avg_value THEN 'roste'
        WHEN cp2021.avg_value < cp2000.avg_value THEN 'klesa'
        ELSE 'nemeni_se'
    END AS trend
FROM 
    (SELECT industry_branch_code, ROUND(AVG(value), 2) AS avg_value
     FROM czechia_payroll
     WHERE payroll_year = 2000
     GROUP BY industry_branch_code) cp2000
JOIN 
    (SELECT industry_branch_code, ROUND(AVG(value), 2) AS avg_value
     FROM czechia_payroll
     WHERE payroll_year = 2021
     GROUP BY industry_branch_code) cp2021
ON cp2000.industry_branch_code = cp2021.industry_branch_code;


--trend v letech
WITH yearly_avg AS (
    SELECT 
        payroll_year, 
        industry_branch_code, 
        ROUND(AVG(value), 0) AS avg_value
    FROM 
        czechia_payroll
    GROUP BY 
        payroll_year, 
        industry_branch_code
)
SELECT 
    current_year.payroll_year AS year,
    current_year.industry_branch_code,
    current_year.avg_value AS current_avg,
    previous_year.avg_value AS previous_avg,
    CASE 
        WHEN current_year.avg_value > previous_year.avg_value THEN 'roste'
        WHEN current_year.avg_value < previous_year.avg_value THEN 'klesa'
        ELSE 'zadna_zmena'
    END AS trend
FROM 
    yearly_avg current_year
LEFT JOIN 
    yearly_avg previous_year
ON 
    current_year.industry_branch_code = previous_year.industry_branch_code
    AND current_year.payroll_year = previous_year.payroll_year + 1
ORDER BY 
    current_year.industry_branch_code, 
    current_year.payroll_year;





2.Kolik je možné si koupit litrů mléka a kilogramů chleba za první a poslední srovnatelné období v dostupných datech cen a mezd?

zjistím, kódy pro chléb (111301) a mléko (114201)

SELECT *
 FROM czechia_price_category cpc
WHERE name like '%mléko%'; 


SELECT * 
FROM czechia_price_category cpc
WHERE name like '%chléb%'; 

--Průměrná cena chleba v letech
SELECT ROUND(AVG(value)) AS average_price,
       category_code,
       YEAR(date_from) AS year
FROM czechia_price 
WHERE category_code = 111301
GROUP BY category_code, YEAR(date_from)
ORDER BY year;

--Průměrná cen mléka v letech
SELECT ROUND(AVG(value)) AS average_price,
       category_code,
       YEAR(date_from) AS year
FROM czechia_price 
WHERE category_code = 114201
GROUP BY category_code, YEAR(date_from)
ORDER BY year;


--Průměrná cena mléka a chleba jen v letech 2006 a 2018
SELECT ROUND(AVG(value)) AS average_price,
       category_code,
       YEAR(date_from) AS year
FROM czechia_price 
WHERE category_code IN (111301, 114201)
  AND YEAR(date_from) IN (2006, 2018)
GROUP BY category_code, YEAR(date_from)
ORDER BY year;

--Výplaty pro jednotlivá odvětví v roce 2006 a 2018(srovnatelné období s daty z category_code)
WITH yearly_avg AS (
    SELECT 
        payroll_year, 
        industry_branch_code, 
        ROUND(AVG(value), 0) AS avg_value
    FROM 
        czechia_payroll
    WHERE 
        payroll_year IN (2006, 2018)
    GROUP BY 
        payroll_year, 
        industry_branch_code
)
SELECT 
    payroll_year AS year,
    industry_branch_code,
    avg_value AS current_avg
FROM 
    yearly_avg
ORDER BY 
    industry_branch_code, 
    payroll_year;



kolik ks chleba a kolik l mléka je možno koupit za výplaty v letech 2006 a 2018?
WITH payroll_avg AS (
    SELECT 
        payroll_year, 
        industry_branch_code, 
        ROUND(AVG(value), 0) AS avg_value
    FROM 
        czechia_payroll
    WHERE 
        payroll_year IN (2006, 2018)
    GROUP BY 
        payroll_year, 
        industry_branch_code
),
price_avg AS (
    SELECT 
        YEAR(date_from) AS year, 
        category_code, 
        ROUND(AVG(value), 0) AS avg_price
    FROM 
        czechia_price
    WHERE 
        category_code IN (111301, 114201)
        AND YEAR(date_from) IN (2006, 2018)
    GROUP BY 
        YEAR(date_from), 
        category_code
)
SELECT 
    p.payroll_year AS year,
    p.industry_branch_code,
    p.avg_value AS avg_payroll,
    pr.avg_price AS avg_price,
    ROUND(p.avg_value / pr.avg_price, 2) AS ratio
FROM 
    payroll_avg p
JOIN 
    price_avg pr
ON 
    p.payroll_year = pr.year
ORDER BY 
    p.industry_branch_code, 
    p.payroll_year;


Která kategorie potravin zdražuje nejpomaleji (je u ní nejnižší percentuální meziroční nárůst)?
--Zjistím trend vývoje cen ve všech kategoriích
WITH yearly_avg AS (
    SELECT 
        YEAR(date_from) AS year, 
        category_code, 
        AVG(value) AS avg_price
    FROM 
        czechia_price
    GROUP BY 
        YEAR(date_from), 
        category_code
)
SELECT 
    current_year.year,
    current_year.category_code,
    ROUND(current_year.avg_price, 2) AS current_avg_price,
    ROUND(previous_year.avg_price, 2) AS previous_avg_price,
    ROUND(((current_year.avg_price - previous_year.avg_price) / previous_year.avg_price) * 100, 2) AS percent_change
FROM 
    yearly_avg current_year
JOIN 
    yearly_avg previous_year
ON 
    current_year.category_code = previous_year.category_code
    AND current_year.year = previous_year.year + 1
ORDER BY 
    current_year.category_code, 
    current_year.year;


která kategorie zdražuje nejpomaleji? (118101 cukr krystalový)
WITH yearly_avg AS (
    SELECT 
        YEAR(date_from) AS year, 
        category_code, 
        AVG(value) AS avg_price
    FROM 
        czechia_price
    GROUP BY 
        YEAR(date_from), 
        category_code
),
percent_change AS (
    SELECT 
        current_year.year,
        current_year.category_code,
        ROUND(current_year.avg_price, 2) AS current_avg_price,
        ROUND(previous_year.avg_price, 2) AS previous_avg_price,
        ROUND(((current_year.avg_price - previous_year.avg_price) / previous_year.avg_price) * 100, 2) AS percent_change
    FROM 
        yearly_avg current_year
    JOIN 
        yearly_avg previous_year
    ON 
        current_year.category_code = previous_year.category_code
        AND current_year.year = previous_year.year + 1
)
SELECT 
    category_code,
    AVG(percent_change) AS avg_percent_change
FROM 
    percent_change
GROUP BY 
    category_code
ORDER BY 
    avg_percent_change ASC
LIMIT 1;


Existuje rok, ve kterém byl meziroční nárůst cen potravin výrazně vyšší než růst mezd (větší než 10 %)? Za srovnatelné období 2006 a 2018
2013	5.55	-5.95 (ceny/mzdy)
2017	9.98	-1.26 (ceny/mzdy)

WITH yearly_price_avg AS (
    SELECT 
        YEAR(date_from) AS year, 
        AVG(value) AS avg_price
    FROM 
       czechia_price
    WHERE 
        YEAR(date_from) BETWEEN 2006 AND 2018
    GROUP BY 
        YEAR(date_from)
),
yearly_wage_avg AS (
    SELECT 
        payroll_year AS year, 
        AVG(value) AS avg_wage
    FROM 
        czechia_payroll
    WHERE 
        payroll_year BETWEEN 2006 AND 2018
    GROUP BY 
        payroll_year
),
price_wage_growth AS (
    SELECT 
        p.year,
        p.avg_price,
        w.avg_wage,
        LAG(p.avg_price) OVER (ORDER BY p.year) AS prev_avg_price,
        LAG(w.avg_wage) OVER (ORDER BY w.year) AS prev_avg_wage
    FROM 
        yearly_price_avg p
    JOIN 
        yearly_wage_avg w ON p.year = w.year
)
SELECT 
    year,
    ROUND(((avg_price - prev_avg_price) / prev_avg_price) * 100, 2) AS price_growth,
    ROUND(((avg_wage - prev_avg_wage) / prev_avg_wage) * 100, 2) AS wage_growth
FROM 
    price_wage_growth
WHERE 
    prev_avg_price IS NOT NULL 
    AND prev_avg_wage IS NOT NULL
    AND ((avg_price - prev_avg_price) / prev_avg_price) * 100 > ((avg_wage - prev_avg_wage) / prev_avg_wage) * 100 + 10
ORDER BY 
    year;


VÝSTUP PRO 1.ÚKOL SQL PROJEKTU
CREATE TABLE t_kristyna_zdrahalova_project_SQL_primary_final AS
WITH yearly_price_avg AS (
    SELECT 
        YEAR(date_from) AS year, 
        category_code, 
        AVG(value) AS avg_price
    FROM 
        czechia_price
    GROUP BY 
        YEAR(date_from), 
        category_code
),
yearly_wage_avg AS (
    SELECT 
        payroll_year AS year, 
        AVG(value) AS avg_wage
    FROM 
        czechia_payroll
    GROUP BY 
        payroll_year
)
SELECT 
    p.year,
    p.category_code,
    ROUND(p.avg_price, 2) AS avg_price,
    ROUND(w.avg_wage, 2) AS avg_wage
FROM 
    yearly_price_avg p
JOIN 
    yearly_wage_avg w ON p.year = w.year
WHERE 
    p.year BETWEEN 2006 AND 2018
ORDER BY 
    p.year, 
    p.category_code;


Z countries vyhledám všechny evropské státy a data k nim
SELECT *
FROM countries
WHERE continent LIKE 'Europe';


Vyhledám pouze evropské země přes kontinenty
SELECT	 country,
  	 continent 
FROM countries
WHERE continent LIKE 'Europe';


Vyhledám data z economies pro Evropu
SELECT   	e.country,
    	e.year,
    	e.GDP,
    	e.taxes 
FROM  economies e
WHERE e.country IN ( 
SELECT  	c.country
        	FROM 	countries c
       	WHERE c.continent LIKE 'Europe');
   
Omezeno časově 2006-2018 (srovnatelné období s ČR)
SELECT 	 e.country,
    	e.year,
    	e.GDP,
    	e.taxes 
FROM 	economies e
WHERE  e.country IN (
        SELECT  c.country
        FROM countries c
        WHERE c.continent LIKE 'Europe' )
    AND e.year BETWEEN 2006 AND 2018;




Procentuální rozdíl u GDP a taxes
WITH RankedData AS (
 SELECT 	e.country, 
        	e.year, 
        	e.GDP, 
        	e.taxes, 
     ROW_NUMBER() OVER (PARTITION BY e.country ORDER BY e.year) AS rn
    FROM economies e
    WHERE e.country IN (
            	SELECT c.country
            	FROM  countries c
            	WHERE c.continent LIKE 'Europe')
        	AND e.year BETWEEN 2006 AND 2018),
PercentageChange AS (
    SELECT a.country,
      	a.year,
        	a.GDP,
        	a.taxes,
        ROUND(((a.GDP - b.GDP) / b.GDP) * 100, 2) AS GDP_Percentage_Change,
        ROUND(((a.taxes - b.taxes) / b.taxes) * 100, 2) AS Taxes_Percentage_Change
    	FROM RankedData a
    LEFT JOIN 
        RankedData b ON a.country = b.country AND a.rn = b.rn + 1)
SELECT 	country,
    	year,
    	GDP,
    	taxes,
    	GDP_Percentage_Change,
    	Taxes_Percentage_Change
FROM PercentageChange
WHERE GDP_Percentage_Change IS NOT NULL AND Taxes_Percentage_Change IS NOT NULL
ORDER BY country, year;


Srovnání GDP a daní
WITH RankedData AS (
    SELECT 
        e.country, 
        e.year, 
        e.GDP, 
        e.taxes, 
        ROW_NUMBER() OVER (PARTITION BY e.country ORDER BY e.year) AS rn
    FROM 
        economies e
    WHERE 
        e.country IN (
            SELECT 
                c.country
            FROM 
                countries c
            WHERE 
                c.continent LIKE 'Europe'
        ) 
        AND e.year BETWEEN 2006 AND 2018
),
PercentageChange AS (
    SELECT 
        a.country,
        a.year,
        a.GDP,
        a.taxes,
        ROUND(((a.GDP - b.GDP) / b.GDP) * 100, 2) AS GDP_Percentage_Change,
        ROUND(((a.taxes - b.taxes) / b.taxes) * 100, 2) AS Taxes_Percentage_Change,
        LEAD(ROUND(((a.taxes - b.taxes) / b.taxes) * 100, 2)) OVER (PARTITION BY a.country ORDER BY a.year) AS Taxes_Percentage_Change_Next_Year
    FROM 
        RankedData a
    LEFT JOIN 
        RankedData b ON a.country = b.country AND a.rn = b.rn + 1
)
SELECT 
    country,
    year,
    GDP,
    taxes,
    GDP_Percentage_Change,
    Taxes_Percentage_Change,
    Taxes_Percentage_Change_Next_Year
FROM 
    PercentageChange
WHERE 
    GDP_Percentage_Change IS NOT NULL 
    AND Taxes_Percentage_Change IS NOT NULL
ORDER BY 
    country, year;



Výstup č.2- tabulka pro Evropská data
CREATE TABLE t_kristyna_zdrahalova_SQL_project_secondary_final AS
WITH RankedData AS (
    SELECT 
        e.country, 
        e.year, 
        e.GDP, 
        e.taxes, 
        ROW_NUMBER() OVER (PARTITION BY e.country ORDER BY e.year) AS rn
    FROM 
        economies e
    WHERE 
        e.country IN (
            SELECT 
                c.country
            FROM 
                countries c
            WHERE 
                c.continent LIKE 'Europe'
        )
        AND e.year BETWEEN 2006 AND 2018
),
PercentageChange AS (
    SELECT 
        a.country,
        a.year,
        a.GDP,
        a.taxes,
        ROUND(((a.GDP - b.GDP) / b.GDP) * 100, 2) AS GDP_Percentage_Change,
        ROUND(((a.taxes - b.taxes) / b.taxes) * 100, 2) AS Taxes_Percentage_Change,
        LEAD(ROUND(((a.taxes - b.taxes) / b.taxes) * 100, 2)) OVER (PARTITION BY a.country ORDER BY a.year) AS Taxes_Percentage_Change_Next_Year
    FROM 
        RankedData a
    LEFT JOIN 
        RankedData b ON a.country = b.country AND a.rn = b.rn + 1
)
SELECT 
    country,
    year,
    GDP,
    taxes,
    GDP_Percentage_Change,
    Taxes_Percentage_Change,
    Taxes_Percentage_Change_Next_Year
FROM 
    PercentageChange
WHERE 
    GDP_Percentage_Change IS NOT NULL 
    AND Taxes_Percentage_Change IS NOT NULL
ORDER BY 
    country, year;



